import { Stack, StackProps } from 'aws-cdk-lib';
import { Construct } from 'constructs';
import * as cdk from 'aws-cdk-lib';
import * as ec2 from 'aws-cdk-lib/aws-ec2';
import * as iam from 'aws-cdk-lib/aws-iam';
import * as ssm from 'aws-cdk-lib/aws-ssm';
import * as fs from 'fs';
import * as path from 'path';
import { NagSuppressions } from 'cdk-nag';
    
export class Ec2Stack extends Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    const knowledgeBaseId = new cdk.CfnParameter(this, 'knowledgeBaseId', {
      type: 'String',
      description: 'Knowledge Base ID for RAG Chatbot',
    });

    new ssm.StringParameter(this, 'KnowledgeBaseIdParam', {
      parameterName: '/RAGChatBot/KNOWLEDGE_BASE_ID',
      stringValue: knowledgeBaseId.valueAsString,
    });
    
    const policy = new iam.PolicyDocument({
      statements: [
        new iam.PolicyStatement({
          effect: iam.Effect.ALLOW,
          actions: [
            'ec2:*'
          ],
          resources: ['arn:aws:ec2:*:*:instance/*'],
        }),
        new iam.PolicyStatement({
          effect: iam.Effect.ALLOW,
          actions: [
            'bedrock:*'
          ],
          resources: ['*'],
        }),
        new iam.PolicyStatement({
          effect: iam.Effect.ALLOW,
          actions: [
            'ssm:GetParameter',
            'ssm:GetParameters',
          ],
          resources: ['*'],
        }),
      ],
    });

    // IAM Role to access EC2
    const instanceRole = new iam.Role(this, 'InstanceRole', {
      assumedBy: new iam.ServicePrincipal('ec2.amazonaws.com'),
      inlinePolicies: {
        'CustomEC2Policy': policy
      },
    });

    // Network setting for EC2
    const defaultVpc = ec2.Vpc.fromLookup(this, 'VPC', {
      isDefault: true,
    });

    const chatbotAppSecurityGroup = new ec2.SecurityGroup(this, 'chatbotAppSecurityGroup', {
      vpc: defaultVpc,
      allowAllOutbound: true,
    });
    chatbotAppSecurityGroup.addIngressRule(
      ec2.Peer.anyIpv4(),
      ec2.Port.tcp(80),
      'httpIpv4',
    );

    // set AMI
    const machineImage = ec2.MachineImage.fromSsmParameter(
      '/aws/service/canonical/ubuntu/server/focal/stable/current/amd64/hvm/ebs-gp2/ami-id'
    );
    
    // set User Data
    const userData = ec2.UserData.forLinux();
    const userDataScript = fs.readFileSync(path.join(__dirname, 'userdata.sh'), 'utf8');
    userData.addCommands(userDataScript);

    // EC2 instance
    const chatbotAppInstance = new ec2.Instance(this, 'chatbotAppInstance', {
      instanceType: new ec2.InstanceType('t2.small'),
      machineImage: machineImage,
      vpc: defaultVpc,
      securityGroup: chatbotAppSecurityGroup,
      role: instanceRole,
      userData: userData,
      blockDevices: [{
        deviceName: '/dev/xvda',
        volume: ec2.BlockDeviceVolume.ebs(8, {
          deleteOnTermination: false,
          encrypted: true,
        }),
      }],
      detailedMonitoring: true,
      instanceInitiatedShutdownBehavior: ec2.InstanceInitiatedShutdownBehavior.STOP,
    });

    new cdk.CfnOutput(this, 'chatbotAppUrl', {
      value: `http://${chatbotAppInstance.instancePublicIp}/`,
      description: '[PLEASE CONNECT IN 5 MINUTES] The URL of chatbot demo generated by AWS CDK',
      exportName: 'chatbotAppUrl',
    });

    NagSuppressions.addResourceSuppressions(instanceRole, [
      {
        id: 'AwsSolutions-IAM5',
        reason: 'SSM parameter access requires wildcard for multiple parameters',
        appliesTo: ['Resource::*'],
      },
      {
        id: 'AwsSolutions-IAM5',
        reason: 'Bedrock and EC2 actions require * resource due to service limitations and unknown instance ARN',
        appliesTo: ['Action::bedrock:*', 'Resource::*'],
      },
      {
        id: 'AwsSolutions-IAM5',
        reason: 'EC2 actions require wildcard for instance resources as specific instance IDs are not known at deployment time',
        appliesTo: ['Action::ec2:*', 'Resource::arn:aws:ec2:*:*:instance/*'],
      },
    ]);

    NagSuppressions.addResourceSuppressions(chatbotAppSecurityGroup, [
      {
        id: 'AwsSolutions-EC23',
        reason: 'HTTP ports are required to be open for the chatbot application',
      },
    ]);

    NagSuppressions.addResourceSuppressions(chatbotAppInstance, [
      {
        id: 'AwsSolutions-EC29',
        reason: 'Termination protection is enabled via deleteOnTermination: false in block devices',
      },
    ]);


  }
}